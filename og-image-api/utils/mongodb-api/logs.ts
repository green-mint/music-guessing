import { MongoClient, ServerApiVersion } from 'mongodb';
import { z } from 'zod';

const LOGGER_LEVELS = {
	fatal: { level: 'fatal', severity: 5 },
	error: { level: 'error', severity: 4 },
	warn: { level: 'warn', severity: 3 },
	info: { level: 'info', severity: 2 },
	debug: { level: 'debug', severity: 1 },
	trace: { level: 'trace', severity: 0 }
} as const;

export const LogLevelSchema = z.object({
	level: z.string(),
	severity: z.number()
});
export const LogDataSchema = z.object({
	sessionId: z.string(),
	eventName: z.string(),
	data: z.any()
});
export const LogAutogeneratedSchema = z.object({
	createdAt: z.date().nullable()
});
export const LogSchema = z
	.object({})
	.merge(LogDataSchema)
	.merge(LogLevelSchema)
	.merge(LogAutogeneratedSchema);
type LogAutogenerated = z.infer<typeof LogAutogeneratedSchema>;
type LogData = z.infer<typeof LogDataSchema>;
type Log = z.infer<typeof LogSchema>;

async function log(log: Omit<Log, keyof LogAutogenerated>) {
	const client = new MongoClient(process.env.MONGODB_CREDENTIALS || '', {
		serverApi: ServerApiVersion.v1
	});
	await client.connect();
	const collection = client.db('heardlify').collection<Log>('logs');
	try {
		await collection.insertOne({
			...log,
			createdAt: new Date()
		});
	} catch (error) {
		console.log(error);
	}
	await client.close();
}
const logTrace = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.trace });
const logDebug = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.debug });
const logInfo = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.info });
const logWarn = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.warn });
const logError = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.error });
const logFatal = (logData: LogData) => log({ ...logData, ...LOGGER_LEVELS.fatal });

const getLogs = async ({
	query,
	limit,
	offset,
	from,
	to
}: {
	query: string;
	limit: number;
	offset: number;
	from: Date;
	to: Date;
}) => {
	const client = new MongoClient(process.env.MONGODB_CREDENTIALS || '', {
		serverApi: ServerApiVersion.v1
	});
	await client.connect();
	const collection = client.db('heardlify').collection<Log>('logs');

	const results = await collection
		.find({
			date: {
				$gte: from,
				$lt: to
			}
		})
		.filter({
			eventName: new RegExp(`.*${query}.*`, 'i')
		})
		.skip(offset)
		.limit(limit)
		.sort({ date: -1 })

		.toArray();

	await client.close();
	return results;
};

const getImportantLogs = async ({
	limit,
	offset,
	from,
	to
}: {
	query: string;
	limit: number;
	offset: number;
	from: Date;
	to: Date;
}) => {
	const client = new MongoClient(process.env.MONGODB_CREDENTIALS || '', {
		serverApi: ServerApiVersion.v1
	});
	await client.connect();
	const collection = client.db('heardlify').collection<Log>('logs');

	const importantEventNames = ['get-song', 'record-result'];

	const results = await collection
		.find({
			date: {
				$gte: from,
				$lt: to
			}
		})
		.filter({
			eventName: new RegExp(`.*${importantEventNames.join('|')}.*`, 'i')
		})
		.skip(offset)
		.limit(limit)
		.sort({ date: -1 })

		.toArray();

	await client.close();

	return results;
};

export default {
	getLogs,
	getImportantLogs,
	logTrace,
	logDebug,
	logInfo,
	logWarn,
	logError,
	logFatal
};
